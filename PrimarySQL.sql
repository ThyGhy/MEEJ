CREATE TABLE IF NOT EXISTS STUDENTS (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    email TEXT NOT NULL UNIQUE,
    firstName TEXT NOT NULL,
    lastName TEXT,
    registrationDate DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS FACULTY (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    email TEXT NOT NULL UNIQUE,
    firstName TEXT NOT NULL,
    lastName TEXT,
    class TEXT
);


CREATE TABLE IF NOT EXISTS EXAMS (
    examId INTEGER PRIMARY KEY AUTOINCREMENT,
    examName TEXT NOT NULL UNIQUE,
    examDate DATETIME,
    examProctorId INTEGER,
    maxSlots INTEGER DEFAULT 20,
    bookedSlots INTEGER DEFAULT 0,
    CHECK (bookedSlots <= maxSlots),
    FOREIGN KEY (examProctorId) REFERENCES FACULTY(id)
    
);


CREATE TABLE IF NOT EXISTS RESERVATIONS (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    studentId INTEGER NOT NULL,
    examId INTEGER NOT NULL,
    reservationDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (studentId, examId),
    FOREIGN KEY (studentId) REFERENCES STUDENTS(id),
    FOREIGN KEY (examId) REFERENCES EXAMS(examId)
);

CREATE TRIGGER IF NOT EXISTS addBookedSlot
AFTER INSERT ON RESERVATIONS
BEGIN
    UPDATE EXAMS 
    SET bookedSlots = bookedSlots + 1
    WHERE examId = NEW.examId;
END;

CREATE TRIGGER IF NOT EXISTS deleteBookedSlot
AFTER DELETE ON RESERVATIONS
BEGIN
    UPDATE EXAMS 
    SET bookedSlots = bookedSlots - 1
    WHERE examId = OLD.examId;
END;